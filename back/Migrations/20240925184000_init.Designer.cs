// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using back.Data;

#nullable disable

namespace back.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240925184000_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FavouriteListPlayground", b =>
                {
                    b.Property<int>("FavouriteListsId")
                        .HasColumnType("int");

                    b.Property<int>("PlaygroundId")
                        .HasColumnType("int");

                    b.HasKey("FavouriteListsId", "PlaygroundId");

                    b.HasIndex("PlaygroundId");

                    b.ToTable("FavouriteListPlayground");
                });

            modelBuilder.Entity("ModeratorListUser", b =>
                {
                    b.Property<int>("ModeratorListsId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ModeratorListsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ModeratorListUser");
                });

            modelBuilder.Entity("back.Models.FavouriteList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PlaygroundId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteList");
                });

            modelBuilder.Entity("back.Models.ModeratorList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlaygroundId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaygroundId");

                    b.ToTable("ModeratorList");
                });

            modelBuilder.Entity("back.Models.Playground", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredVotesDeletePlayground")
                        .HasColumnType("int");

                    b.Property<int>("RequiredVotesDiscardSession")
                        .HasColumnType("int");

                    b.Property<int>("RequiredVotesDismissModerator")
                        .HasColumnType("int");

                    b.Property<int>("RequiredVotesEditPlayground")
                        .HasColumnType("int");

                    b.Property<int>("RequiredVotesElectModerator")
                        .HasColumnType("int");

                    b.Property<int>("RequiredVotesScheduleSession")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Playground");
                });

            modelBuilder.Entity("back.Models.ScheduledSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaygroundId")
                        .HasColumnType("int");

                    b.Property<int>("Repeat")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaygroundId");

                    b.ToTable("ScheduledSession");
                });

            modelBuilder.Entity("back.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduledSessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduledSessionId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("back.Models.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VoteChoice")
                        .HasColumnType("int");

                    b.Property<int>("VotingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VotingId");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("back.Models.Voting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Agenda")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaygroundId")
                        .HasColumnType("int");

                    b.Property<int>("VotingCategory")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaygroundId");

                    b.ToTable("Voting");
                });

            modelBuilder.Entity("FavouriteListPlayground", b =>
                {
                    b.HasOne("back.Models.FavouriteList", null)
                        .WithMany()
                        .HasForeignKey("FavouriteListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back.Models.Playground", null)
                        .WithMany()
                        .HasForeignKey("PlaygroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModeratorListUser", b =>
                {
                    b.HasOne("back.Models.ModeratorList", null)
                        .WithMany()
                        .HasForeignKey("ModeratorListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("back.Models.FavouriteList", b =>
                {
                    b.HasOne("back.Models.User", "User")
                        .WithMany("FavouriteLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("back.Models.ModeratorList", b =>
                {
                    b.HasOne("back.Models.Playground", "Playground")
                        .WithMany("Moderators")
                        .HasForeignKey("PlaygroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playground");
                });

            modelBuilder.Entity("back.Models.ScheduledSession", b =>
                {
                    b.HasOne("back.Models.Playground", "Playground")
                        .WithMany("ScheduledEvents")
                        .HasForeignKey("PlaygroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playground");
                });

            modelBuilder.Entity("back.Models.User", b =>
                {
                    b.HasOne("back.Models.ScheduledSession", null)
                        .WithMany("Participants")
                        .HasForeignKey("ScheduledSessionId");
                });

            modelBuilder.Entity("back.Models.Vote", b =>
                {
                    b.HasOne("back.Models.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back.Models.Voting", "Voting")
                        .WithMany("Votes")
                        .HasForeignKey("VotingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voting");
                });

            modelBuilder.Entity("back.Models.Voting", b =>
                {
                    b.HasOne("back.Models.Playground", "Playground")
                        .WithMany("Votings")
                        .HasForeignKey("PlaygroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playground");
                });

            modelBuilder.Entity("back.Models.Playground", b =>
                {
                    b.Navigation("Moderators");

                    b.Navigation("ScheduledEvents");

                    b.Navigation("Votings");
                });

            modelBuilder.Entity("back.Models.ScheduledSession", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("back.Models.User", b =>
                {
                    b.Navigation("FavouriteLists");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("back.Models.Voting", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
